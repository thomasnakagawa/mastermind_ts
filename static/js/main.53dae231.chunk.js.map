{"version":3,"sources":["util/GameplayUtil.ts","components/GuessForm.tsx","components/GameHistory.tsx","components/Gameplay.tsx","components/ConfigModal.tsx","components/Mastermind.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HintValues","CalculateHintsForGuess","solution","userGuess","length","Error","occurancesInSolution","forEach","solutionValue","hasOwnProperty","newHints","pegIndex","push","CorrectAll","CorrectValueOnly","wrongsToAdd","slotIndex","Wrong","GuessForm","props","useState","currentGuess","setCurrentGuess","useEffect","initialGuess","gameConfig","numberOfSlots","defaultValue","className","map","peg","FormControl","as","key","value","onChange","e","intVal","parseInt","target","numberOfColors","newCurrentGuess","JSON","parse","stringify","result","i","Button","onClick","onSubmit","GameHistory","rows","gameHistory","entry","emptyRowsToAdd","emptyIndex","hint","historyRow","historyIndex","hints","pegs","HistoryEntry","guess","spring","useSpring","opacity","from","div","style","hintIndex","Gameplay","setGameHistory","setSolution","slots","colors","newSolution","Math","floor","random","GenerateRandomSolution","width","newGuess","newHistoryEntry","variant","alert","ConfigModal","initialGameConfig","setColors","setSlots","Modal","show","onHide","onCancel","centered","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","type","Footer","DefaultGameConfig","Mastermind","setGameConfig","displayConfig","setDisplayConfig","newConfig","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53dae231.chunk.js","sourcesContent":["export interface IGameConfig {\n  numberOfColors: number,\n  numberOfSlots: number\n}\n\nexport enum HintValues {\n  CorrectAll = \"‚úÖ\",\n  CorrectValueOnly = \"üî∏\",\n  Wrong = \"‚ùå\"\n}\n\nexport type HintSet = Array<HintValues>;\nexport type GuessSet = Array<number>;\n\nexport function CalculateHintsForGuess(solution : GuessSet, userGuess : GuessSet) : HintSet {\n  if (solution.length !== userGuess.length) {\n    throw new Error(\"Solution and Guess must have same length\");\n  }\n\n  // count the number of times each value occurs in the solution\n  const occurancesInSolution : { [key: number]: number } = {};\n  solution.forEach(solutionValue => {\n    if (occurancesInSolution.hasOwnProperty(solutionValue) === false) {\n      occurancesInSolution[solutionValue] = 0;\n    }\n    occurancesInSolution[solutionValue] += 1;\n  });\n\n  const newHints : Array<HintValues> = [];\n  // find all perfect matches first\n  for (let pegIndex = 0; pegIndex < solution.length; pegIndex++) {\n    if (userGuess[pegIndex] === solution[pegIndex]) {\n      newHints.push(HintValues.CorrectAll);\n      occurancesInSolution[userGuess[pegIndex]] -= 1;\n    }\n  }\n\n  // then find any correct values in incorrect positions\n  for (let pegIndex = 0; pegIndex < solution.length; pegIndex++) {\n    const valueIsInSolutionButInWrongPlace = userGuess[pegIndex] !== solution[pegIndex] && occurancesInSolution[userGuess[pegIndex]] > 0;\n    if (valueIsInSolutionButInWrongPlace) {\n      newHints.push(HintValues.CorrectValueOnly);\n      occurancesInSolution[userGuess[pegIndex]] -= 1;\n    }\n  }\n\n  // then fill the rest with incorrect values\n  const wrongsToAdd = solution.length - newHints.length;\n  for (let slotIndex = 0; slotIndex < wrongsToAdd; slotIndex++) {\n    newHints.push(HintValues.Wrong);\n  }\n\n  return newHints;\n}\n\nexport function GenerateRandomSolution(slots : number, colors : number) : GuessSet {\n  const newSolution : Array<number> = [];\n  for (let slotIndex = 0; slotIndex < slots; slotIndex++) {\n    newSolution.push(Math.floor(Math.random() * colors));\n  }\n  return newSolution;\n}\n","import React, { useState, useEffect } from 'react';\nimport { Button, FormControl } from 'react-bootstrap';\n\nimport { IGameConfig, GuessSet } from '../util/GameplayUtil';\n\ninterface IGuessFormProps {\n  gameConfig : IGameConfig,\n  defaultValue : number,\n  onSubmit : (guess: GuessSet) => void\n}\n\nexport const GuessForm : React.FC<IGuessFormProps> = (props) => {\n  const [currentGuess, setCurrentGuess] = useState<GuessSet>([]);\n\n  // set default current guess based on number of slots needed to guess\n  useEffect(() => {\n    const initialGuess : Array<number> = [];\n    for (let slotIndex = 0; slotIndex < props.gameConfig.numberOfSlots; slotIndex++) {\n      initialGuess.push(props.defaultValue);\n    }\n    setCurrentGuess(initialGuess);\n  }, [props.gameConfig.numberOfSlots, props.defaultValue]);\n\n  return (\n    <div className=\"guess-form\">\n      <div className=\"guess-form-left\">\n        { currentGuess.map((peg, pegIndex) => (\n          <FormControl\n            as=\"select\"\n            className=\"guess-input\"\n            key={ pegIndex }\n            value={ peg }\n            onChange={ e => {\n              const intVal = parseInt(e.target.value);\n              if (intVal >= 0 && intVal < props.gameConfig.numberOfColors) {\n                const newCurrentGuess = JSON.parse(JSON.stringify(currentGuess));\n                newCurrentGuess[pegIndex] = intVal;\n                setCurrentGuess(newCurrentGuess);\n              }\n            }}\n          >\n            { (() => {\n                const result : Array<JSX.Element> = [];\n                for (let i = 0; i < props.gameConfig.numberOfColors; i++) {\n                  result.push(<option key={ i } value={ i }>{ i }</option>);\n                }\n                return result;\n            })() }\n          </FormControl>\n        )) }\n      </div>\n      <div className=\"guess-form-right\">\n        <Button onClick={ () => props.onSubmit(currentGuess) }>Submit</Button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { HintSet, GuessSet } from '../util/GameplayUtil';\nimport { HistoryRow } from './Gameplay';\n\ninterface IGameHistoryProps {\n  gameHistory : Array<HistoryRow>,\n  rows : number\n}\n\nexport const GameHistory : React.FC<IGameHistoryProps> = (props) => {\n  const rows : Array<HistoryRow> = [];\n  props.gameHistory.forEach(entry => rows.push(entry));\n\n  const emptyRowsToAdd = props.rows - rows.length;\n  for (let emptyIndex = 0; emptyIndex < emptyRowsToAdd; emptyIndex++) {\n    rows.push({ userGuess: [], hint: [] });\n  }\n\n  return (\n    <div className=\"past-guesses\">\n      { rows.map((historyRow, historyIndex) => (\n        <HistoryEntry key={ historyIndex } hints={ historyRow.hint } pegs={ historyRow.userGuess }/>\n      )) }\n    </div>\n  );\n};\n\ninterface IHistoryEntryProps {\n  hints: HintSet,\n  pegs: GuessSet\n}\n\nconst HistoryEntry : React.FC<IHistoryEntryProps> = (guess) => {\n  const spring = useSpring({opacity: 1, from: { opacity: 0 }});\n\n  if (guess.pegs.length < 1 && guess.hints.length < 1) {\n    return <div className=\"guess-empty\"/>;\n  }\n\n  return (\n    <animated.div style={spring} className=\"guess\">\n      <div className=\"pegs\">\n        { guess.pegs.map((peg, pegIndex) => (\n          <div key={ pegIndex} className=\"history-icon peg\">\n            { peg }\n          </div>\n        ))}\n      </div>\n      <div className=\"hints\">\n        { guess.hints.map((hint, hintIndex) => (\n          <div key={ hintIndex } className=\"history-icon hint\">\n            { hint }\n          </div>\n        )) }\n      </div>\n    </animated.div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport { IGameConfig, GenerateRandomSolution, CalculateHintsForGuess, HintSet, GuessSet } from '../util/GameplayUtil';\nimport { GuessForm } from './GuessForm';\nimport { GameHistory } from './GameHistory';\n\ninterface IGameplayProps {\n  gameConfig: IGameConfig\n}\n\nexport type HistoryRow = { userGuess: GuessSet, hint: HintSet };\n\nexport const Gameplay : React.FC<IGameplayProps> = (props) => {\n  const [gameHistory, setGameHistory] = useState<Array<HistoryRow>>([]);\n  const [solution, setSolution] = useState<GuessSet>([]);\n\n  // restart game when game config changes\n  useEffect(() => {\n    setGameHistory([]);\n    setSolution(GenerateRandomSolution(props.gameConfig.numberOfSlots, props.gameConfig.numberOfColors));\n  }, [props.gameConfig]);\n\n  return (\n    <div className=\"gameplay\" style={{ width: props.gameConfig.numberOfSlots * 100 + \"px\"}}>\n      <GameHistory\n        gameHistory={ gameHistory }\n        rows={ 12 }\n      />\n      <GuessForm\n        gameConfig={ props.gameConfig }\n        defaultValue={ 0 }\n        onSubmit={ newGuess => {\n          const newHistoryEntry : HistoryRow = {\n            userGuess: newGuess,\n            hint: CalculateHintsForGuess(solution, newGuess)\n          };\n          setGameHistory([...gameHistory, newHistoryEntry]);\n        } }\n      />\n      <Button variant=\"secondary\" onClick={ () => {\n        alert(JSON.stringify(solution));\n      }}>Show solution</Button>\n    </div>\n  );\n}\n\n","import React, { useState } from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\n\nimport { IGameConfig } from '../util/GameplayUtil';\n\ninterface IConfigModalProps {\n  show : boolean\n  initialGameConfig : IGameConfig,\n  onSubmit : (newGameConfig : IGameConfig) => void,\n  onCancel: () => void\n}\n\nexport const ConfigModal : React.FC<IConfigModalProps> = (props) => {\n  const [colors, setColors] = useState<number>(props.initialGameConfig.numberOfColors);\n  const [slots, setSlots] = useState<number>(props.initialGameConfig.numberOfSlots);\n\n  function HandleSubmit() {\n    props.onSubmit({ numberOfColors: colors, numberOfSlots: slots });\n  }\n\n  return (\n    <Modal\n      show={ props.show }\n      onHide={ props.onCancel }\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Game settings</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n        <Form.Group controlId=\"formslots\">\n            <Form.Label>Number of slots</Form.Label>\n            <Form.Control\n              type=\"number\"\n              value={ slots }\n              onChange={ e => setSlots(parseInt(e.target.value)) }\n            />\n          </Form.Group>\n          <Form.Group controlId=\"formcolors\">\n            <Form.Label>Number of colors</Form.Label>\n            <Form.Control\n              type=\"number\"\n              value={ colors }\n              onChange={ e => setColors(parseInt(e.target.value)) }\n            />\n          </Form.Group>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={ HandleSubmit } >Apply and restart</Button> \n      </Modal.Footer>\n    </Modal>\n  );\n}","import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport '../style/mastermind.css';\nimport { IGameConfig } from '../util/GameplayUtil';\nimport { Gameplay } from './Gameplay';\nimport { ConfigModal } from './ConfigModal';\n\nconst DefaultGameConfig : IGameConfig = { numberOfColors: 6, numberOfSlots: 4 };\n\nexport const Mastermind : React.FC = () => {\n  const [gameConfig, setGameConfig] = useState<IGameConfig>(DefaultGameConfig);\n  const [displayConfig, setDisplayConfig] = useState<boolean>(false);\n  \n  function handleConfigSubmit(newConfig : IGameConfig) : void {\n    setGameConfig(newConfig);\n    setDisplayConfig(false);\n  }\n\n  return (\n    <div>\n      <h1>Mastermind</h1>\n      <Gameplay\n        gameConfig={ gameConfig }\n      />\n      <ConfigModal\n        show={ displayConfig }\n        initialGameConfig={ gameConfig }\n        onSubmit={ handleConfigSubmit }\n        onCancel={ () => setDisplayConfig(false) }\n      />\n      <Button onClick={ () => setDisplayConfig(true) }>Settings</Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { Mastermind } from './components/Mastermind';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Mastermind />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}